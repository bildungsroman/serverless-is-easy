AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Stackery Serverless API Example Stack
Resources:
  function61D00F31:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-function61D00F31
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: getWelcomePage
      CodeUri: src/getWelcomePage
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        apiFE76C470:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref apiFE76C470
    Metadata:
      StackeryName: getWelcomePage
  apiFE76C470:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName}
        - ResourceName: apiFE76C470
      StageName: !Ref StackeryEnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${function61D00F31.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
  function8E6C5467:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-function8E6C5467
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: logErrors
      CodeUri: src/logErrors
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Environment:
        Variables:
          DB_INSTANCE: !Ref database137BAF9C
          DB_ADDRESS: !GetAtt database137BAF9C.Endpoint.Address
          DB_PORT: !GetAtt database137BAF9C.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${database137BAF9C}
    Metadata:
      StackeryName: logErrors
  database137BAF9C:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5'
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: '0'
      CopyTagsToSnapshot: true
      DBInstanceClass: db.t2.micro
      DBSubnetGroupName: !Ref database137BAF9CSubnetGroup
      Engine: mariadb
      EngineVersion: '10.2'
      MasterUsername: root
      MasterUserPassword: ''
      MultiAZ: false
      PubliclyAccessible: true
      StorageType: gp2
      Tags:
        - Key: Name
          Value: !Sub
            - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Database ${ResourceName}
            - ResourceName: database137BAF9C
      VPCSecurityGroups:
        - !Ref database137BAF9CSecurityGroup
  database137BAF9CSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Database ${ResourceName} VPC Subnets
        - ResourceName: database137BAF9C
      SubnetIds: !Ref DefaultVPCSubnets
      Tags:
        - Key: Name
          Value: !Sub
            - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Database ${ResourceName} VPC Subnets
            - ResourceName: database137BAF9C
  database137BAF9CSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database Security Group
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 3306
        IpProtocol: tcp
        ToPort: 3306
      Tags:
        - Key: Name
          Value: !Sub
            - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Database ${ResourceName} VPC Security Group
            - ResourceName: database137BAF9C
      VpcId: !Ref DefaultVPCId
  cdnF34A0F6D:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub cdnf34a0f6d.${StackeryDeploymentNamespace}.stackery-stacks.io
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          TargetOriginId: StackeryCDN
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref cdnF34A0F6DSSLCertificate
          SslSupportMethod: sni-only
        Origins:
          - DomainName: !GetAtt objectStore46071728.DomainName
            Id: StackeryCDN
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${cdnF34A0F6DOriginAccessIdentity}
  cdnF34A0F6DSSLCertificate:
    Type: Custom::StackeryUsEast1SSLCertificate
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      DomainName: !Sub cdnf34a0f6d.${StackeryDeploymentNamespace}.stackery-stacks.io
      DomainValidationOptions:
        - DomainName: !Sub cdnf34a0f6d.${StackeryDeploymentNamespace}.stackery-stacks.io
          ValidationDomain: stackery-stacks.io
  cdnF34A0F6DStackeryStacksDomain:
    Type: Custom::StackeryStacksDomain
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      SubdomainName: !Sub cdnf34a0f6d.${StackeryDeploymentNamespace}
      CName: !GetAtt cdnF34A0F6D.DomainName
    Condition: cdnF34A0F6DStackeryStacksDomain
  objectStore46071728:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-objectstore46071728
  cdnF34A0F6DOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Stackery
  cdnF34A0F6DBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref objectStore46071728
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${cdnF34A0F6DOriginAccessIdentity}
            Action: s3:GetObject
            Resource: !Sub
              - ${BucketArn}/*
              - BucketArn: !GetAtt objectStore46071728.Arn
Parameters:
  StackeryStackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  StackeryEnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  StackeryEnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)
  DefaultVPCId:
    Type: AWS::EC2::VPC::Id
    Description: AWS account-specific default VPC ID (injected by Stackery at deployment time)
  DefaultVPCSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: AWS account-specific default VPC subnets (injected by Stackery at deployment time)
  StackeryDeploymentNamespace:
    Type: String
    Description: Stackery Deployment Namespace (injected by Stackery at deployment time)
Metadata:
  StackeryErrorsTargets:
    function8E6C5467: {}
Conditions:
  cdnF34A0F6DStackeryStacksDomain: !Or
    - !Equals
      - 'false'
      - 'false'
    - !Equals
      - 'false'
      - 'false'